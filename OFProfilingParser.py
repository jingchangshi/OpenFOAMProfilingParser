import sys
import os
import json
############################################################

class ProfilingData:
    def __init__(self, id_val, parent_id, desc, time_val):
        self.id = id_val
        self.parent_id = parent_id
        self.desc = desc
        self.time = time_val
        self.percent = 0.0
    def setPercent(self, perc):
        self.percent = perc

############################################################

if (len(sys.argv)==1):
    sys.exit("Usage: python3 %s input.json"%(sys.argv[0]))

input_json_fname = sys.argv[1]
with open(input_json_fname, 'r') as f:
    input_data = json.load(f)

prof_fpath = input_data["profiling_file"]
dot_shape_str = input_data["dot_shape"]
dot_format_str = input_data["dot_format"]
case_name = input_data["case_name"]

############################################################

# The profiling file is generated by OpenFOAM's profilingSummary
prof_f = open(prof_fpath, "r")
prof_raw_content = prof_f.readlines()
prof_f.close()

nline = len(prof_raw_content)
trigger_beg_row_list = []
for i in range(nline):
    line = prof_raw_content[i]
    if "profiling" in line:
        prof_beg_row = i
        #  break
    if "trigger" in line:
        trigger_beg_row_list.append(i)

n_trigger = len(trigger_beg_row_list)
pd_list = []
time_total = 0.0
for i in range(n_trigger):
    tg_rb = trigger_beg_row_list[i]
    # id
    r = tg_rb + 2
    line = prof_raw_content[r]
    tg_id = int(line.split()[1][:-1])
    # parentId
    if (tg_id == 0):
        # It is the root node
        tg_parent_id = 0
    else:
        r += 1
        line = prof_raw_content[r]
        tg_parent_id = int(line.split()[1][:-1])
    # description
    r += 1
    line = prof_raw_content[r]
    tg_desc = line.split()[1][:-1]
    # calls
    r += 1
    # totalTime
    r += 1
    line = prof_raw_content[r]
    tg_time = float(line.split()[3])
    if (tg_id == 0):
        time_total = tg_time
    pd = ProfilingData(tg_id, tg_parent_id, tg_desc, tg_time);
    pd_list.append(pd)

for i in range(n_trigger):
    pd_id = pd_list[i].id
    pd_time = pd_list[i].time
    perc = pd_time / time_total
    pd_list[i].setPercent(perc)

prof_dot_fname = "OpenFOAM_Profiling_%s_Dot"%(case_name)
# References:
# https://graphviz.org/documentation/
# https://graphviz.readthedocs.io/en/stable/api.html
import graphviz
dot = graphviz.Digraph(prof_dot_fname, comment='OpenFOAM profiling data',
        format=dot_format_str)
# Create nodes
for i in range(n_trigger):
    node_id = "%s"%(pd_list[i].id)
    node_desc = "%s\ntime=%.2es\npercent=%.2f%%"%(pd_list[i].desc, pd_list[i].time, pd_list[i].percent*100)
    dot.node(node_id, node_desc, shape=dot_shape_str)
# Create edges connecting the nodes
for i in range(n_trigger):
    if (pd_list[i].id != pd_list[i].parent_id):
        dot.edge("%s"%(pd_list[i].parent_id), "%s"%(pd_list[i].id))

#  dot_unf = dot.unflatten()
dot_output_dir = os.path.dirname(prof_fpath)
dot.render(directory=dot_output_dir)
prof_dot_fpath = os.path.join(dot_output_dir, prof_dot_fname)
print("%s is saved"%(prof_dot_fpath))
